using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Client.Resources;
using Content.Client.Stylesheets;
using Content.Shared.Clothing;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Content.Sunrise.Interfaces.Shared;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.SponsorTiers;

[GenerateTypedNameReferences]
public sealed partial class SponsorTierEntry : PanelContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private readonly SpriteSystem _sprite;
    private readonly LobbyUIController _lobbyUIController;
    private ISharedSponsorsManager? _sponsorsManager; // Sunrise-Sponsors

    public int Index { get; }

    public SponsorTierEntry(SponsorInfo sponsorTier, Action<int>? collapse, int index)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        IoCManager.Instance!.TryResolveType(out _sponsorsManager); // Sunrise-Sponsors
        _sprite = _entityManager.System<SpriteSystem>();
        _lobbyUIController = UserInterfaceManager.GetUIController<LobbyUIController>();

        Index = index;

        Header.OnKeyBindUp += args =>
        {
            if (args.Function != EngineKeyFunctions.Use)
                return;

            collapse?.Invoke(Index);
        };
        HeaderName.Text = sponsorTier.Title;

        LoadOpenAntags(sponsorTier.OpenAntags);
        LoadPriorityAntags(sponsorTier.PriorityAntags);
        LoadOpenRoles(sponsorTier.OpenRoles);
        LoadPriorityRoles(sponsorTier.PriorityRoles);
        LoadMarkings(sponsorTier.AllowedMarkings);
    }

    private void LoadMarkings(string[] markings)
    {
        foreach (var marking in markings)
        {
            if (!_prototypeManager.TryIndex(marking, out MarkingPrototype? markingProto))
                continue;

            if (!TryGetDummySpecies(markingProto.SpeciesRestrictions, out var spriteSpecifier))
                continue;

            var directionalLayeredTexture = new MarkingPreview();

            directionalLayeredTexture.SetLayersFromSprites(_sprite.RsiStateLike(spriteSpecifier), markingProto.Sprites);

            var panel = CreateMarkingIcon($"marking-{markingProto.ID}", directionalLayeredTexture);

            AllowedMarkingsGrid.AddChild(panel);
        }
    }

    private bool TryGetDummySpecies(List<string>? species, [NotNullWhen(true)] out SpriteSpecifier? spriteSpecifier)
    {
        if (species != null && species.Count > 0)
        {
            if (_prototypeManager.TryIndex(species[0], out SpeciesPrototype? speciesProto))
            {
                spriteSpecifier = speciesProto.Preview;
                return true;
            }
        }
        else if (_prototypeManager.TryIndex("MobHuman", out SpeciesPrototype? speciesProto))
        {
            spriteSpecifier = speciesProto.Preview;
            return true;
        }

        spriteSpecifier = null;
        return false;
    }

    private void LoadPriorityAntags(string[] priorityAntags)
    {
        foreach (var priorityAntag in priorityAntags)
        {
            if (!_prototypeManager.TryIndex(priorityAntag, out AntagPrototype? antagProto))
                continue;

            var panel = CreateIcon(antagProto.Name, antagProto.PreviewIcon);

            PriorityAntagGrid.AddChild(panel);
        }
    }

    private void LoadOpenAntags(string[] openAntags)
    {
        foreach (var openAntag in openAntags)
        {
            if (!_prototypeManager.TryIndex(openAntag, out AntagPrototype? antagProto))
                continue;

            var panel = CreateIcon(antagProto.Name, antagProto.PreviewIcon);

            OpenAntagGrid.AddChild(panel);
        }
    }

    private void LoadPriorityRoles(string[] priorityRoles)
    {
        foreach (var priorityRole in priorityRoles)
        {
            if (!_prototypeManager.TryIndex(priorityRole, out JobPrototype? roleProto))
                continue;

            var sponsorPrototypes = _sponsorsManager?.GetClientPrototypes().ToArray() ?? [];

            var humanoid = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            if (humanoid == null)
                continue;

            var previewEntity = roleProto.JobPreviewEntity ?? (EntProtoId?)roleProto.JobEntity;

            EntityUid dummyEnt;

            if (previewEntity == null)
            {
                var dummy = _prototypeManager.Index(humanoid.Species).DollPrototype;
                dummyEnt = _entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);

                _entityManager.System<HumanoidAppearanceSystem>().LoadProfile(dummyEnt, humanoid);
                _lobbyUIController.GiveDummyJobClothes(dummyEnt, humanoid, roleProto);

                if (_prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(roleProto.ID)))
                {
                    var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(roleProto.ID), _playerManager.LocalSession, humanoid.Species, _entityManager, _prototypeManager, sponsorPrototypes);
                    _lobbyUIController.GiveDummyLoadout(dummyEnt, loadout, true);
                }
            }
            else
            {
                dummyEnt = _entityManager.SpawnEntity(previewEntity, MapCoordinates.Nullspace);
            }

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);

            var panel = CreateRoleIcon(roleProto.Name, view);

            PriorityRolesGrid.AddChild(panel);
        }
    }

    private void LoadOpenRoles(string[] openRoles)
    {
        foreach (var openRole in openRoles)
        {
            if (!_prototypeManager.TryIndex(openRole, out JobPrototype? roleProto))
                continue;

            var sponsorPrototypes = _sponsorsManager?.GetClientPrototypes().ToArray() ?? [];

            var humanoid = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            if (humanoid == null)
                continue;

            var previewEntity = roleProto.JobPreviewEntity ?? (EntProtoId?)roleProto.JobEntity;

            EntityUid dummyEnt;

            if (previewEntity == null)
            {
                var dummy = _prototypeManager.Index(humanoid.Species).DollPrototype;
                dummyEnt = _entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);

                _entityManager.System<HumanoidAppearanceSystem>().LoadProfile(dummyEnt, humanoid);
                _lobbyUIController.GiveDummyJobClothes(dummyEnt, humanoid, roleProto);

                if (_prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(roleProto.ID)))
                {
                    var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(roleProto.ID), _playerManager.LocalSession, humanoid.Species, _entityManager, _prototypeManager, sponsorPrototypes);
                    _lobbyUIController.GiveDummyLoadout(dummyEnt, loadout, true);
                }
            }
            else
            {
                dummyEnt = _entityManager.SpawnEntity(previewEntity, MapCoordinates.Nullspace);
            }

            var view = new SpriteView
            {
                SetSize = new Vector2(128, 128),
                Scale = new Vector2(4, 4)
            };

            view.SetEntity(dummyEnt);

            var panel = CreateRoleIcon(roleProto.Name, view);

            OpenRolesGrid.AddChild(panel);
        }
    }

    private PanelContainer CreateRoleIcon(string name, SpriteView spriteView)
    {
        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/light_panel_background_bordered.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        var panel = new PanelContainer()
        {
            SetSize = new Vector2(200, 200),
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
            Align = BoxContainer.AlignMode.Center
        };

        panel.AddChild(box);
        panel.PanelOverride = back;

        var title = new RichTextLabel()
        {
            HorizontalAlignment = HAlignment.Center,
            Text = Loc.GetString(name),
            StyleClasses = { "LabelKeyText" }
        };

        box.AddChild(spriteView);
        box.AddChild(title);

        return panel;
    }

    private PanelContainer CreateIcon(string name, SpriteSpecifier spriteSpecifier)
    {
        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/light_panel_background_bordered.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        var panel = new PanelContainer()
        {
            SetSize = new Vector2(200, 200),
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        panel.AddChild(box);
        panel.PanelOverride = back;

        var icon = new TextureRect()
        {
            SetSize = new Vector2(128, 128),
            Texture = _sprite.Frame0(spriteSpecifier),
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
        };

        var title = new RichTextLabel()
        {
            HorizontalAlignment = HAlignment.Center,
            Text = Loc.GetString(name),
            StyleClasses = { "LabelKeyText" }
        };

        box.AddChild(icon);
        box.AddChild(title);

        return panel;
    }

    private PanelContainer CreateMarkingIcon(string name, Control textureBox)
    {
        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/light_panel_background_bordered.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        var panel = new PanelContainer()
        {
            SetSize = new Vector2(200, 200),
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(5, 5, 5, 5),
            StyleClasses = { StyleBase.ButtonSquare },
        };

        panel.AddChild(box);
        panel.PanelOverride = back;

        var title = new Label()
        {
            HorizontalAlignment = HAlignment.Center,
            Text = Loc.GetString(name),
            StyleClasses = { "LabelKeyText" },
            Align=Label.AlignMode.Center
        };

        box.AddChild(textureBox);
        box.AddChild(title);

        return panel;
    }
}
